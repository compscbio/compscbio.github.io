{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Comp Lesson 2: Introduction to Python\n",
    "<HR>\n",
    "\n",
    "## Good afternoon\n",
    "\n",
    "Continue our tour of Python:\n",
    "    \n",
    "1. Calculator and overloading\n",
    "2. Basic I/O and exception handling    \n",
    "3. Packages\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The interpreter as a calculator\n",
    "\n",
    "Mathematical operators include +, -, *, /\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 - 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "81"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "9 * 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "81"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "9 ** 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "21 / 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "/ always returns a float\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.142857142857143"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "22 / 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use // to truncate and retain only the integer portion:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "22 // 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or convert the result to an int()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(22/7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "101"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = 100\n",
    "A += 1\n",
    "A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Discuss immutable aspect of int, and what happens to 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fork', 'spoon', 'knife']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utensils = [\"fork\", \"spoon\", \"knife\"]\n",
    "utensils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\+ is overloaded:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fork', 'spoon', 'knife', 'chop_sticks']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utensils += [\"chop_sticks\"]\n",
    "utensils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this context, the right operand must be 'iterable':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'int' object is not iterable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [12]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0m utensils \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(\u001b[38;5;241m22\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m7\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: 'int' object is not iterable"
     ]
    }
   ],
   "source": [
    "utensils += int(22/7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make this work, to add 5 to the list, wrap it in a list itself:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fork', 'spoon', 'knife', 'chop_sticks', 3]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utensils = [\"fork\", \"spoon\", \"knife\"]\n",
    "utensils += [\"chop_sticks\"]\n",
    "utensils += [int(22/7)]\n",
    "utensils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You could have also used the `append` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fork', 'spoon', 'knife', 'chop_sticks']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utensils = [\"fork\", \"spoon\", \"knife\"]\n",
    "utensils.append(\"chop_sticks\")\n",
    "utensils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What happens when you add a string directly?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fork',\n",
       " 'spoon',\n",
       " 'knife',\n",
       " 'c',\n",
       " 'h',\n",
       " 'o',\n",
       " 'p',\n",
       " '_',\n",
       " 's',\n",
       " 't',\n",
       " 'i',\n",
       " 'c',\n",
       " 'k',\n",
       " 's']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utensils = [\"fork\", \"spoon\", \"knife\"]\n",
    "utensils += \"chop_sticks\"\n",
    "utensils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What happens when you append a string wrapped as a list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fork', 'spoon', 'knife', ['chop_sticks']]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utensils = [\"fork\", \"spoon\", \"knife\"]\n",
    "utensils.append([\"chop_sticks\"])\n",
    "utensils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic I/O and exception handling   \n",
    "\n",
    "Here, we are going to look at very basic way to get input, and how to anticipate and handle errors.\n",
    "\n",
    "Let's try to write a program that will ask the user for words, then prints them out in reverse order\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter a word, followed by Return. When you are done, hit return again\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your word:  apple\n",
      "Your word:  orange\n",
      "Your word:  grape\n",
      "Your word:  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------\n",
      "2 grape\n",
      "1 orange\n",
      "0 apple\n"
     ]
    }
   ],
   "source": [
    "print(\"Please enter a word, followed by Return. When you are done, hit return again\")\n",
    "sentence = []\n",
    "while True:\n",
    "    word = input(\"Your word: \")\n",
    "    if(word):\n",
    "        sentence += [word]\n",
    "    else:\n",
    "        break\n",
    "\n",
    "print(\"-------------------------------\")\n",
    "for i in range( len(sentence)-1, -1, -1):\n",
    "    print(i, sentence[i])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's modify this slightly to ask for series of integers, which our program will sum:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter an integer, followed by Return. When you are done, hit return again\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your integer:  1\n",
      "Your integer:  2\n",
      "Your integer:  3\n",
      "Your integer:  4\n",
      "Your integer:  5\n",
      "Your integer:  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for +=: 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [20]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m my_sum \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m( \u001b[38;5;28mlen\u001b[39m(nums)\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m---> 13\u001b[0m     my_sum \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m nums[i]\n\u001b[1;32m     14\u001b[0m     \u001b[38;5;28mprint\u001b[39m(i,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m: \u001b[39m\u001b[38;5;124m\"\u001b[39m,nums[i])\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYour total is \u001b[39m\u001b[38;5;124m\"\u001b[39m, my_sum)\n",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +=: 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "print(\"Please enter an integer, followed by Return. When you are done, hit return again\")\n",
    "nums = []\n",
    "while True:\n",
    "    your_int = input(\"Your integer: \")\n",
    "    if(your_int):\n",
    "        nums += [your_int]\n",
    "    else:\n",
    "        break\n",
    "\n",
    "print(\"-------------------------------\")\n",
    "my_sum = 0\n",
    "for i in range( len(nums)-1, -1, -1):\n",
    "    my_sum += nums[i]\n",
    "    print(i,\": \",nums[i])\n",
    "    \n",
    "print(\"Your total is \", my_sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter an integer, followed by Return. When you are done, hit return again\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your integer:  1\n",
      "Your integer:  2\n",
      "Your integer:  3\n",
      "Your integer:  4\n",
      "Your integer:  5\n",
      "Your integer:  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------\n",
      "4 :  5\n",
      "3 :  4\n",
      "2 :  3\n",
      "1 :  2\n",
      "0 :  1\n",
      "Your total is  15\n"
     ]
    }
   ],
   "source": [
    "print(\"Please enter an integer, followed by Return. When you are done, hit return again\")\n",
    "nums = []\n",
    "while True:\n",
    "    your_int = input(\"Your integer: \")\n",
    "    if(your_int):\n",
    "        nums += [int(your_int)]\n",
    "    else:\n",
    "        break\n",
    "\n",
    "print(\"-------------------------------\")\n",
    "my_sum = 0\n",
    "for i in range( len(nums)-1, -1, -1):\n",
    "    my_sum += nums[i]\n",
    "    print(i,\": \",nums[i])\n",
    "    \n",
    "print(\"Your total is \", my_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter an integer, followed by Return. When you are done, hit return again\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your integer:  1\n",
      "Your integer:  2\n",
      "Your integer:  3\n",
      "Your integer:  4\n",
      "Your integer:  computer\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: 'computer'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[0;32mIn [22]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m your_int \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYour integer: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m(your_int):\n\u001b[0;32m----> 6\u001b[0m     nums \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43myour_int\u001b[49m\u001b[43m)\u001b[49m]\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'computer'"
     ]
    }
   ],
   "source": [
    "print(\"Please enter an integer, followed by Return. When you are done, hit return again\")\n",
    "nums = []\n",
    "while True:\n",
    "    your_int = input(\"Your integer: \")\n",
    "    if(your_int):\n",
    "        nums += [int(your_int)]\n",
    "    else:\n",
    "        break\n",
    "\n",
    "print(\"-------------------------------\")\n",
    "my_sum = 0\n",
    "for i in range( len(nums)-1, -1, -1):\n",
    "    my_sum += nums[i]\n",
    "    print(i,\": \",nums[i])\n",
    "    \n",
    "print(\"Your total is \", my_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need is a way to reasonably handle situations like this. We can do so with \"exceptions\". Exceptions are objects created at runtime but functions indicating that something is amiss. What is nice about exceptions is that we can engineer code to handle them and behave accordingly. Let's make our code a bit more robust with a *try* clause:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter an integer, followed by Return. When you are done, hit return again\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your integer:  1\n",
      "Your integer:  2\n",
      "Your integer:  3\n",
      "Your integer:  4\n",
      "Your integer:  computer\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "invalid literal for int() with base 10: 'computer'\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your integer:  5\n",
      "Your integer:  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------\n",
      "4 :  5\n",
      "3 :  4\n",
      "2 :  3\n",
      "1 :  2\n",
      "0 :  1\n",
      "Your total is  15\n"
     ]
    }
   ],
   "source": [
    "print(\"Please enter an integer, followed by Return. When you are done, hit return again\")\n",
    "nums = []\n",
    "while True:\n",
    "    your_int = input(\"Your integer: \")\n",
    "    if(your_int):\n",
    "        try:\n",
    "            nums += [int(your_int)]\n",
    "        except ValueError as err:\n",
    "            print(err)\n",
    "            continue\n",
    "    else:\n",
    "        break\n",
    "\n",
    "print(\"-------------------------------\")\n",
    "my_sum = 0\n",
    "for i in range( len(nums)-1, -1, -1):\n",
    "    my_sum += nums[i]\n",
    "    print(i,\": \",nums[i])\n",
    "    \n",
    "print(\"Your total is \", my_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "mention the err variable, and how python looks for matching except statements, what happens when no matching except clause is found"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Packages \n",
    "\n",
    "One of the strengths of Python is the set of packages that have functionality beyond the built in core functions and data types. You can install these with anaconda or pip. To access these packages, you need to use the import statement. For example, we covered some basic arithmetic operations earlier. You can get more beefy math with the [math module](https://docs.python.org/3/library/math.html):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120 120\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "a = 5 * 4 * 3 * 2 * 1\n",
    "b = math.factorial(5)\n",
    "print(a, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see the functions and data in a package, use the `dir()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__spec__',\n",
       " 'acos',\n",
       " 'acosh',\n",
       " 'asin',\n",
       " 'asinh',\n",
       " 'atan',\n",
       " 'atan2',\n",
       " 'atanh',\n",
       " 'ceil',\n",
       " 'comb',\n",
       " 'copysign',\n",
       " 'cos',\n",
       " 'cosh',\n",
       " 'degrees',\n",
       " 'dist',\n",
       " 'e',\n",
       " 'erf',\n",
       " 'erfc',\n",
       " 'exp',\n",
       " 'expm1',\n",
       " 'fabs',\n",
       " 'factorial',\n",
       " 'floor',\n",
       " 'fmod',\n",
       " 'frexp',\n",
       " 'fsum',\n",
       " 'gamma',\n",
       " 'gcd',\n",
       " 'hypot',\n",
       " 'inf',\n",
       " 'isclose',\n",
       " 'isfinite',\n",
       " 'isinf',\n",
       " 'isnan',\n",
       " 'isqrt',\n",
       " 'lcm',\n",
       " 'ldexp',\n",
       " 'lgamma',\n",
       " 'log',\n",
       " 'log10',\n",
       " 'log1p',\n",
       " 'log2',\n",
       " 'modf',\n",
       " 'nan',\n",
       " 'nextafter',\n",
       " 'perm',\n",
       " 'pi',\n",
       " 'pow',\n",
       " 'prod',\n",
       " 'radians',\n",
       " 'remainder',\n",
       " 'sin',\n",
       " 'sinh',\n",
       " 'sqrt',\n",
       " 'tan',\n",
       " 'tanh',\n",
       " 'tau',\n",
       " 'trunc',\n",
       " 'ulp']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(math)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get help on a function, use the `help()` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'log' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [26]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0m help(\u001b[43mlog\u001b[49m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'log' is not defined"
     ]
    }
   ],
   "source": [
    "help(log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on built-in function log in module math:\n",
      "\n",
      "log(...)\n",
      "    log(x, [base=math.e])\n",
      "    Return the logarithm of x to the given base.\n",
      "    \n",
      "    If the base not specified, returns the natural logarithm (base e) of x.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(math.log)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A very useful and efficient math module is [Numpy](https://numpy.org/doc/stable/index.html). Let's import it, but take advantage of `as` to make a shorthand for package contexts:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's also import a commonly used plotting package [Matplotlib](https://matplotlib.org/). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The examples below come straight from the [NumPy Intro](https://numpy.org/doc/stable/user/absolute_beginners.html), which I recommend. \n",
    "\n",
    "Arrays are a fundamental data type in NumPy. Here is how you can create them, convert them to [Pandas](https://pandas.pydata.org/) DataFrames, write them out, and load them:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          0         1         2         3\n",
      "0 -2.582892  0.430148 -1.240820  1.595726\n",
      "1  0.990278  1.171510  0.941257 -0.146925\n",
      "2  0.769893  0.812997 -0.950684  0.117696\n",
      "3  0.204840  0.347845  1.969792  0.519928\n"
     ]
    }
   ],
   "source": [
    "a = np.array([[-2.58289208,  0.43014843, -1.24082018, 1.59572603],\n",
    "              [ 0.99027828, 1.17150989,  0.94125714, -0.14692469],\n",
    "              [ 0.76989341,  0.81299683, -0.95068423, 0.11769564],\n",
    "              [ 0.20484034,  0.34784527,  1.96979195, 0.51992837]])\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(a)\n",
    "\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('pd.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-2.582892</td>\n",
       "      <td>0.430148</td>\n",
       "      <td>-1.240820</td>\n",
       "      <td>1.595726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.990278</td>\n",
       "      <td>1.171510</td>\n",
       "      <td>0.941257</td>\n",
       "      <td>-0.146925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.769893</td>\n",
       "      <td>0.812997</td>\n",
       "      <td>-0.950684</td>\n",
       "      <td>0.117696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.204840</td>\n",
       "      <td>0.347845</td>\n",
       "      <td>1.969792</td>\n",
       "      <td>0.519928</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0         0         1         2         3\n",
       "0           0 -2.582892  0.430148 -1.240820  1.595726\n",
       "1           1  0.990278  1.171510  0.941257 -0.146925\n",
       "2           2  0.769893  0.812997 -0.950684  0.117696\n",
       "3           3  0.204840  0.347845  1.969792  0.519928"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('pd.csv')\n",
    "data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's plot some data with Matplotlib.\n",
    "\n",
    "This line ensure the matplotlib figures are sent to this notebook:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x122865a30>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(a[:,0], a[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x122959fd0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(a[:,0], a[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We ended at this point in the live lecture. Now let's go further."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's have some fun with these packages\n",
    " and install a useful data set, the famous iris data\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "import quilt.data.uciml.iris as ir\n",
    "\n",
    "iris = ir.tables.iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width           class\n",
       "0             5.1          3.5           1.4          0.2     Iris-setosa\n",
       "1             4.9          3.0           1.4          0.2     Iris-setosa\n",
       "2             4.7          3.2           1.3          0.2     Iris-setosa\n",
       "3             4.6          3.1           1.5          0.2     Iris-setosa\n",
       "4             5.0          3.6           1.4          0.2     Iris-setosa\n",
       "..            ...          ...           ...          ...             ...\n",
       "145           6.7          3.0           5.2          2.3  Iris-virginica\n",
       "146           6.3          2.5           5.0          1.9  Iris-virginica\n",
       "147           6.5          3.0           5.2          2.0  Iris-virginica\n",
       "148           6.2          3.4           5.4          2.3  Iris-virginica\n",
       "149           5.9          3.0           5.1          1.8  Iris-virginica\n",
       "\n",
       "[150 rows x 5 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1232b3550>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(iris['petal_length'], iris['sepal_length'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1233023d0>]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#fig, ax = plt.subplots(figsize=(5, 5), layout='constrained')\n",
    "#ax.scatter('petal_length', 'sepal_length',data = iris)\n",
    "type(plt)\n",
    "fig, ax = plt.subplots() \n",
    "ax.plot([1, 2, 3, 4], [1, 4, 2, 3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()  # an empty figure with no Axes\n",
    "fig, ax = plt.subplots()  # a figure with a single Axes\n",
    "fig, axs = plt.subplots(2, 2)  # a figure with a 2x2 grid of Axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x123518c10>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(1,2)\n",
    "axs[0].scatter(iris['petal_length'], iris['sepal_length'])\n",
    "axs[1].scatter(iris['petal_width'], iris['sepal_width'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.5.1\n"
     ]
    }
   ],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "print(mpl.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris.plot.box()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Iris-setosa</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-versicolor</th>\n",
       "      <td>5.9</td>\n",
       "      <td>2.8</td>\n",
       "      <td>4.35</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iris-virginica</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.55</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 sepal_length  sepal_width  petal_length  petal_width\n",
       "class                                                                \n",
       "Iris-setosa               5.0          3.4          1.50          0.2\n",
       "Iris-versicolor           5.9          2.8          4.35          1.3\n",
       "Iris-virginica            6.5          3.0          5.55          2.0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.groupby(\"class\").median()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class\n",
       "Iris-setosa        AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Iris-versicolor    AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Iris-virginica     AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "dtype: object"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris.groupby(\"class\").plot.box()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The watermark extension is already loaded. To reload it, use:\n",
      "  %reload_ext watermark\n",
      "Python implementation: CPython\n",
      "Python version       : 3.9.10\n",
      "IPython version      : 8.0.1\n",
      "\n",
      "numpy     : 1.21.5\n",
      "pandas    : 1.4.0\n",
      "matplotlib: 3.5.1\n",
      "quilt     : 2.9.15\n",
      "jupyterlab: 3.2.8\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%load_ext watermark\n",
    "%watermark -v -p numpy,pandas,matplotlib,quilt,jupyterlab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
